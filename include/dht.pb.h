// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dht.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dht_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dht_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dht_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dht_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dht_2eproto;
namespace dht {
class AddPeerRequest;
struct AddPeerRequestDefaultTypeInternal;
extern AddPeerRequestDefaultTypeInternal _AddPeerRequest_default_instance_;
class AddPeerResponse;
struct AddPeerResponseDefaultTypeInternal;
extern AddPeerResponseDefaultTypeInternal _AddPeerResponse_default_instance_;
class FindNodeRequest;
struct FindNodeRequestDefaultTypeInternal;
extern FindNodeRequestDefaultTypeInternal _FindNodeRequest_default_instance_;
class FindNodeResponse;
struct FindNodeResponseDefaultTypeInternal;
extern FindNodeResponseDefaultTypeInternal _FindNodeResponse_default_instance_;
class NodeId;
struct NodeIdDefaultTypeInternal;
extern NodeIdDefaultTypeInternal _NodeId_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class ReplicateChunkRequest;
struct ReplicateChunkRequestDefaultTypeInternal;
extern ReplicateChunkRequestDefaultTypeInternal _ReplicateChunkRequest_default_instance_;
class ReplicateChunkResponse;
struct ReplicateChunkResponseDefaultTypeInternal;
extern ReplicateChunkResponseDefaultTypeInternal _ReplicateChunkResponse_default_instance_;
class StoreRequest;
struct StoreRequestDefaultTypeInternal;
extern StoreRequestDefaultTypeInternal _StoreRequest_default_instance_;
class StoreResponse;
struct StoreResponseDefaultTypeInternal;
extern StoreResponseDefaultTypeInternal _StoreResponse_default_instance_;
}  // namespace dht
PROTOBUF_NAMESPACE_OPEN
template<> ::dht::AddPeerRequest* Arena::CreateMaybeMessage<::dht::AddPeerRequest>(Arena*);
template<> ::dht::AddPeerResponse* Arena::CreateMaybeMessage<::dht::AddPeerResponse>(Arena*);
template<> ::dht::FindNodeRequest* Arena::CreateMaybeMessage<::dht::FindNodeRequest>(Arena*);
template<> ::dht::FindNodeResponse* Arena::CreateMaybeMessage<::dht::FindNodeResponse>(Arena*);
template<> ::dht::NodeId* Arena::CreateMaybeMessage<::dht::NodeId>(Arena*);
template<> ::dht::PingRequest* Arena::CreateMaybeMessage<::dht::PingRequest>(Arena*);
template<> ::dht::PingResponse* Arena::CreateMaybeMessage<::dht::PingResponse>(Arena*);
template<> ::dht::ReplicateChunkRequest* Arena::CreateMaybeMessage<::dht::ReplicateChunkRequest>(Arena*);
template<> ::dht::ReplicateChunkResponse* Arena::CreateMaybeMessage<::dht::ReplicateChunkResponse>(Arena*);
template<> ::dht::StoreRequest* Arena::CreateMaybeMessage<::dht::StoreRequest>(Arena*);
template<> ::dht::StoreResponse* Arena::CreateMaybeMessage<::dht::StoreResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dht {

// ===================================================================

class NodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.NodeId) */ {
 public:
  inline NodeId() : NodeId(nullptr) {}
  ~NodeId() override;
  explicit PROTOBUF_CONSTEXPR NodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeId(const NodeId& from);
  NodeId(NodeId&& from) noexcept
    : NodeId() {
    *this = ::std::move(from);
  }

  inline NodeId& operator=(const NodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeId& operator=(NodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeId* internal_default_instance() {
    return reinterpret_cast<const NodeId*>(
               &_NodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeId& a, NodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeId& from) {
    NodeId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.NodeId";
  }
  protected:
  explicit NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dht.NodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit PROTOBUF_CONSTEXPR PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingRequest& from) {
    PingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
  };
  // .dht.NodeId sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::dht::NodeId& sender() const;
  PROTOBUF_NODISCARD ::dht::NodeId* release_sender();
  ::dht::NodeId* mutable_sender();
  void set_allocated_sender(::dht::NodeId* sender);
  private:
  const ::dht::NodeId& _internal_sender() const;
  ::dht::NodeId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dht::NodeId* sender);
  ::dht::NodeId* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:dht.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dht::NodeId* sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  explicit PROTOBUF_CONSTEXPR PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingResponse& from) {
    PingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:dht.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class StoreRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.StoreRequest) */ {
 public:
  inline StoreRequest() : StoreRequest(nullptr) {}
  ~StoreRequest() override;
  explicit PROTOBUF_CONSTEXPR StoreRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreRequest(const StoreRequest& from);
  StoreRequest(StoreRequest&& from) noexcept
    : StoreRequest() {
    *this = ::std::move(from);
  }

  inline StoreRequest& operator=(const StoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreRequest& operator=(StoreRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreRequest* internal_default_instance() {
    return reinterpret_cast<const StoreRequest*>(
               &_StoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StoreRequest& a, StoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreRequest& from) {
    StoreRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.StoreRequest";
  }
  protected:
  explicit StoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kSenderFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .dht.NodeId sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::dht::NodeId& sender() const;
  PROTOBUF_NODISCARD ::dht::NodeId* release_sender();
  ::dht::NodeId* mutable_sender();
  void set_allocated_sender(::dht::NodeId* sender);
  private:
  const ::dht::NodeId& _internal_sender() const;
  ::dht::NodeId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dht::NodeId* sender);
  ::dht::NodeId* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:dht.StoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::dht::NodeId* sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class StoreResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.StoreResponse) */ {
 public:
  inline StoreResponse() : StoreResponse(nullptr) {}
  ~StoreResponse() override;
  explicit PROTOBUF_CONSTEXPR StoreResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreResponse(const StoreResponse& from);
  StoreResponse(StoreResponse&& from) noexcept
    : StoreResponse() {
    *this = ::std::move(from);
  }

  inline StoreResponse& operator=(const StoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreResponse& operator=(StoreResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreResponse* internal_default_instance() {
    return reinterpret_cast<const StoreResponse*>(
               &_StoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StoreResponse& a, StoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreResponse& from) {
    StoreResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.StoreResponse";
  }
  protected:
  explicit StoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:dht.StoreResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class FindNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.FindNodeRequest) */ {
 public:
  inline FindNodeRequest() : FindNodeRequest(nullptr) {}
  ~FindNodeRequest() override;
  explicit PROTOBUF_CONSTEXPR FindNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodeRequest(const FindNodeRequest& from);
  FindNodeRequest(FindNodeRequest&& from) noexcept
    : FindNodeRequest() {
    *this = ::std::move(from);
  }

  inline FindNodeRequest& operator=(const FindNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeRequest& operator=(FindNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodeRequest* internal_default_instance() {
    return reinterpret_cast<const FindNodeRequest*>(
               &_FindNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FindNodeRequest& a, FindNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNodeRequest& from) {
    FindNodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.FindNodeRequest";
  }
  protected:
  explicit FindNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 2,
    kSenderFieldNumber = 1,
  };
  // bytes target_id = 2;
  void clear_target_id();
  const std::string& target_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // .dht.NodeId sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::dht::NodeId& sender() const;
  PROTOBUF_NODISCARD ::dht::NodeId* release_sender();
  ::dht::NodeId* mutable_sender();
  void set_allocated_sender(::dht::NodeId* sender);
  private:
  const ::dht::NodeId& _internal_sender() const;
  ::dht::NodeId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dht::NodeId* sender);
  ::dht::NodeId* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:dht.FindNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
    ::dht::NodeId* sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class FindNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.FindNodeResponse) */ {
 public:
  inline FindNodeResponse() : FindNodeResponse(nullptr) {}
  ~FindNodeResponse() override;
  explicit PROTOBUF_CONSTEXPR FindNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodeResponse(const FindNodeResponse& from);
  FindNodeResponse(FindNodeResponse&& from) noexcept
    : FindNodeResponse() {
    *this = ::std::move(from);
  }

  inline FindNodeResponse& operator=(const FindNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeResponse& operator=(FindNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodeResponse* internal_default_instance() {
    return reinterpret_cast<const FindNodeResponse*>(
               &_FindNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FindNodeResponse& a, FindNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNodeResponse& from) {
    FindNodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.FindNodeResponse";
  }
  protected:
  explicit FindNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosestNodesFieldNumber = 1,
  };
  // repeated .dht.NodeId closest_nodes = 1;
  int closest_nodes_size() const;
  private:
  int _internal_closest_nodes_size() const;
  public:
  void clear_closest_nodes();
  ::dht::NodeId* mutable_closest_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dht::NodeId >*
      mutable_closest_nodes();
  private:
  const ::dht::NodeId& _internal_closest_nodes(int index) const;
  ::dht::NodeId* _internal_add_closest_nodes();
  public:
  const ::dht::NodeId& closest_nodes(int index) const;
  ::dht::NodeId* add_closest_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dht::NodeId >&
      closest_nodes() const;

  // @@protoc_insertion_point(class_scope:dht.FindNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dht::NodeId > closest_nodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class ReplicateChunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.ReplicateChunkRequest) */ {
 public:
  inline ReplicateChunkRequest() : ReplicateChunkRequest(nullptr) {}
  ~ReplicateChunkRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplicateChunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicateChunkRequest(const ReplicateChunkRequest& from);
  ReplicateChunkRequest(ReplicateChunkRequest&& from) noexcept
    : ReplicateChunkRequest() {
    *this = ::std::move(from);
  }

  inline ReplicateChunkRequest& operator=(const ReplicateChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateChunkRequest& operator=(ReplicateChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateChunkRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicateChunkRequest*>(
               &_ReplicateChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReplicateChunkRequest& a, ReplicateChunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicateChunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateChunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateChunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicateChunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicateChunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicateChunkRequest& from) {
    ReplicateChunkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicateChunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.ReplicateChunkRequest";
  }
  protected:
  explicit ReplicateChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kSenderFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .dht.NodeId sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::dht::NodeId& sender() const;
  PROTOBUF_NODISCARD ::dht::NodeId* release_sender();
  ::dht::NodeId* mutable_sender();
  void set_allocated_sender(::dht::NodeId* sender);
  private:
  const ::dht::NodeId& _internal_sender() const;
  ::dht::NodeId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dht::NodeId* sender);
  ::dht::NodeId* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:dht.ReplicateChunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::dht::NodeId* sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class ReplicateChunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.ReplicateChunkResponse) */ {
 public:
  inline ReplicateChunkResponse() : ReplicateChunkResponse(nullptr) {}
  ~ReplicateChunkResponse() override;
  explicit PROTOBUF_CONSTEXPR ReplicateChunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicateChunkResponse(const ReplicateChunkResponse& from);
  ReplicateChunkResponse(ReplicateChunkResponse&& from) noexcept
    : ReplicateChunkResponse() {
    *this = ::std::move(from);
  }

  inline ReplicateChunkResponse& operator=(const ReplicateChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateChunkResponse& operator=(ReplicateChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateChunkResponse* internal_default_instance() {
    return reinterpret_cast<const ReplicateChunkResponse*>(
               &_ReplicateChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReplicateChunkResponse& a, ReplicateChunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicateChunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateChunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateChunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicateChunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicateChunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicateChunkResponse& from) {
    ReplicateChunkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicateChunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.ReplicateChunkResponse";
  }
  protected:
  explicit ReplicateChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:dht.ReplicateChunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class AddPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.AddPeerRequest) */ {
 public:
  inline AddPeerRequest() : AddPeerRequest(nullptr) {}
  ~AddPeerRequest() override;
  explicit PROTOBUF_CONSTEXPR AddPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerRequest(const AddPeerRequest& from);
  AddPeerRequest(AddPeerRequest&& from) noexcept
    : AddPeerRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerRequest& operator=(const AddPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerRequest& operator=(AddPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerRequest*>(
               &_AddPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddPeerRequest& a, AddPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPeerRequest& from) {
    AddPeerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.AddPeerRequest";
  }
  protected:
  explicit AddPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
  };
  // .dht.NodeId sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::dht::NodeId& sender() const;
  PROTOBUF_NODISCARD ::dht::NodeId* release_sender();
  ::dht::NodeId* mutable_sender();
  void set_allocated_sender(::dht::NodeId* sender);
  private:
  const ::dht::NodeId& _internal_sender() const;
  ::dht::NodeId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dht::NodeId* sender);
  ::dht::NodeId* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:dht.AddPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dht::NodeId* sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// -------------------------------------------------------------------

class AddPeerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dht.AddPeerResponse) */ {
 public:
  inline AddPeerResponse() : AddPeerResponse(nullptr) {}
  ~AddPeerResponse() override;
  explicit PROTOBUF_CONSTEXPR AddPeerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerResponse(const AddPeerResponse& from);
  AddPeerResponse(AddPeerResponse&& from) noexcept
    : AddPeerResponse() {
    *this = ::std::move(from);
  }

  inline AddPeerResponse& operator=(const AddPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerResponse& operator=(AddPeerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerResponse* internal_default_instance() {
    return reinterpret_cast<const AddPeerResponse*>(
               &_AddPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddPeerResponse& a, AddPeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPeerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPeerResponse& from) {
    AddPeerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dht.AddPeerResponse";
  }
  protected:
  explicit AddPeerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:dht.AddPeerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dht_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeId

// bytes id = 1;
inline void NodeId::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NodeId::id() const {
  // @@protoc_insertion_point(field_get:dht.NodeId.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeId::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.NodeId.id)
}
inline std::string* NodeId::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dht.NodeId.id)
  return _s;
}
inline const std::string& NodeId::_internal_id() const {
  return _impl_.id_.Get();
}
inline void NodeId::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeId::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeId::release_id() {
  // @@protoc_insertion_point(field_release:dht.NodeId.id)
  return _impl_.id_.Release();
}
inline void NodeId::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.NodeId.id)
}

// string ip = 2;
inline void NodeId::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& NodeId::ip() const {
  // @@protoc_insertion_point(field_get:dht.NodeId.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeId::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.NodeId.ip)
}
inline std::string* NodeId::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:dht.NodeId.ip)
  return _s;
}
inline const std::string& NodeId::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void NodeId::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeId::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeId::release_ip() {
  // @@protoc_insertion_point(field_release:dht.NodeId.ip)
  return _impl_.ip_.Release();
}
inline void NodeId::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.NodeId.ip)
}

// int32 port = 3;
inline void NodeId::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t NodeId::_internal_port() const {
  return _impl_.port_;
}
inline int32_t NodeId::port() const {
  // @@protoc_insertion_point(field_get:dht.NodeId.port)
  return _internal_port();
}
inline void NodeId::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void NodeId::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dht.NodeId.port)
}

// -------------------------------------------------------------------

// PingRequest

// .dht.NodeId sender = 1;
inline bool PingRequest::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool PingRequest::has_sender() const {
  return _internal_has_sender();
}
inline void PingRequest::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::dht::NodeId& PingRequest::_internal_sender() const {
  const ::dht::NodeId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dht::NodeId&>(
      ::dht::_NodeId_default_instance_);
}
inline const ::dht::NodeId& PingRequest::sender() const {
  // @@protoc_insertion_point(field_get:dht.PingRequest.sender)
  return _internal_sender();
}
inline void PingRequest::unsafe_arena_set_allocated_sender(
    ::dht::NodeId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dht.PingRequest.sender)
}
inline ::dht::NodeId* PingRequest::release_sender() {
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dht::NodeId* PingRequest::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dht.PingRequest.sender)
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dht::NodeId* PingRequest::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dht::NodeId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dht::NodeId* PingRequest::mutable_sender() {
  ::dht::NodeId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dht.PingRequest.sender)
  return _msg;
}
inline void PingRequest::set_allocated_sender(::dht::NodeId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dht.PingRequest.sender)
}

// -------------------------------------------------------------------

// PingResponse

// string message = 1;
inline void PingResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PingResponse::message() const {
  // @@protoc_insertion_point(field_get:dht.PingResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.PingResponse.message)
}
inline std::string* PingResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:dht.PingResponse.message)
  return _s;
}
inline const std::string& PingResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void PingResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* PingResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* PingResponse::release_message() {
  // @@protoc_insertion_point(field_release:dht.PingResponse.message)
  return _impl_.message_.Release();
}
inline void PingResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.PingResponse.message)
}

// -------------------------------------------------------------------

// StoreRequest

// .dht.NodeId sender = 1;
inline bool StoreRequest::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool StoreRequest::has_sender() const {
  return _internal_has_sender();
}
inline void StoreRequest::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::dht::NodeId& StoreRequest::_internal_sender() const {
  const ::dht::NodeId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dht::NodeId&>(
      ::dht::_NodeId_default_instance_);
}
inline const ::dht::NodeId& StoreRequest::sender() const {
  // @@protoc_insertion_point(field_get:dht.StoreRequest.sender)
  return _internal_sender();
}
inline void StoreRequest::unsafe_arena_set_allocated_sender(
    ::dht::NodeId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dht.StoreRequest.sender)
}
inline ::dht::NodeId* StoreRequest::release_sender() {
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dht::NodeId* StoreRequest::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dht.StoreRequest.sender)
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dht::NodeId* StoreRequest::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dht::NodeId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dht::NodeId* StoreRequest::mutable_sender() {
  ::dht::NodeId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dht.StoreRequest.sender)
  return _msg;
}
inline void StoreRequest::set_allocated_sender(::dht::NodeId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dht.StoreRequest.sender)
}

// bytes key = 2;
inline void StoreRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& StoreRequest::key() const {
  // @@protoc_insertion_point(field_get:dht.StoreRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.StoreRequest.key)
}
inline std::string* StoreRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:dht.StoreRequest.key)
  return _s;
}
inline const std::string& StoreRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void StoreRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* StoreRequest::release_key() {
  // @@protoc_insertion_point(field_release:dht.StoreRequest.key)
  return _impl_.key_.Release();
}
inline void StoreRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.StoreRequest.key)
}

// bytes value = 3;
inline void StoreRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& StoreRequest::value() const {
  // @@protoc_insertion_point(field_get:dht.StoreRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.StoreRequest.value)
}
inline std::string* StoreRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dht.StoreRequest.value)
  return _s;
}
inline const std::string& StoreRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void StoreRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* StoreRequest::release_value() {
  // @@protoc_insertion_point(field_release:dht.StoreRequest.value)
  return _impl_.value_.Release();
}
inline void StoreRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.StoreRequest.value)
}

// -------------------------------------------------------------------

// StoreResponse

// string status = 1;
inline void StoreResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& StoreResponse::status() const {
  // @@protoc_insertion_point(field_get:dht.StoreResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.StoreResponse.status)
}
inline std::string* StoreResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:dht.StoreResponse.status)
  return _s;
}
inline const std::string& StoreResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void StoreResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* StoreResponse::release_status() {
  // @@protoc_insertion_point(field_release:dht.StoreResponse.status)
  return _impl_.status_.Release();
}
inline void StoreResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.StoreResponse.status)
}

// -------------------------------------------------------------------

// FindNodeRequest

// .dht.NodeId sender = 1;
inline bool FindNodeRequest::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool FindNodeRequest::has_sender() const {
  return _internal_has_sender();
}
inline void FindNodeRequest::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::dht::NodeId& FindNodeRequest::_internal_sender() const {
  const ::dht::NodeId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dht::NodeId&>(
      ::dht::_NodeId_default_instance_);
}
inline const ::dht::NodeId& FindNodeRequest::sender() const {
  // @@protoc_insertion_point(field_get:dht.FindNodeRequest.sender)
  return _internal_sender();
}
inline void FindNodeRequest::unsafe_arena_set_allocated_sender(
    ::dht::NodeId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dht.FindNodeRequest.sender)
}
inline ::dht::NodeId* FindNodeRequest::release_sender() {
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dht::NodeId* FindNodeRequest::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dht.FindNodeRequest.sender)
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dht::NodeId* FindNodeRequest::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dht::NodeId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dht::NodeId* FindNodeRequest::mutable_sender() {
  ::dht::NodeId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dht.FindNodeRequest.sender)
  return _msg;
}
inline void FindNodeRequest::set_allocated_sender(::dht::NodeId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dht.FindNodeRequest.sender)
}

// bytes target_id = 2;
inline void FindNodeRequest::clear_target_id() {
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& FindNodeRequest::target_id() const {
  // @@protoc_insertion_point(field_get:dht.FindNodeRequest.target_id)
  return _internal_target_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNodeRequest::set_target_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.FindNodeRequest.target_id)
}
inline std::string* FindNodeRequest::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:dht.FindNodeRequest.target_id)
  return _s;
}
inline const std::string& FindNodeRequest::_internal_target_id() const {
  return _impl_.target_id_.Get();
}
inline void FindNodeRequest::_internal_set_target_id(const std::string& value) {
  
  _impl_.target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNodeRequest::_internal_mutable_target_id() {
  
  return _impl_.target_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNodeRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:dht.FindNodeRequest.target_id)
  return _impl_.target_id_.Release();
}
inline void FindNodeRequest::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_id_.SetAllocated(target_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_id_.IsDefault()) {
    _impl_.target_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.FindNodeRequest.target_id)
}

// -------------------------------------------------------------------

// FindNodeResponse

// repeated .dht.NodeId closest_nodes = 1;
inline int FindNodeResponse::_internal_closest_nodes_size() const {
  return _impl_.closest_nodes_.size();
}
inline int FindNodeResponse::closest_nodes_size() const {
  return _internal_closest_nodes_size();
}
inline void FindNodeResponse::clear_closest_nodes() {
  _impl_.closest_nodes_.Clear();
}
inline ::dht::NodeId* FindNodeResponse::mutable_closest_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:dht.FindNodeResponse.closest_nodes)
  return _impl_.closest_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dht::NodeId >*
FindNodeResponse::mutable_closest_nodes() {
  // @@protoc_insertion_point(field_mutable_list:dht.FindNodeResponse.closest_nodes)
  return &_impl_.closest_nodes_;
}
inline const ::dht::NodeId& FindNodeResponse::_internal_closest_nodes(int index) const {
  return _impl_.closest_nodes_.Get(index);
}
inline const ::dht::NodeId& FindNodeResponse::closest_nodes(int index) const {
  // @@protoc_insertion_point(field_get:dht.FindNodeResponse.closest_nodes)
  return _internal_closest_nodes(index);
}
inline ::dht::NodeId* FindNodeResponse::_internal_add_closest_nodes() {
  return _impl_.closest_nodes_.Add();
}
inline ::dht::NodeId* FindNodeResponse::add_closest_nodes() {
  ::dht::NodeId* _add = _internal_add_closest_nodes();
  // @@protoc_insertion_point(field_add:dht.FindNodeResponse.closest_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dht::NodeId >&
FindNodeResponse::closest_nodes() const {
  // @@protoc_insertion_point(field_list:dht.FindNodeResponse.closest_nodes)
  return _impl_.closest_nodes_;
}

// -------------------------------------------------------------------

// ReplicateChunkRequest

// .dht.NodeId sender = 1;
inline bool ReplicateChunkRequest::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool ReplicateChunkRequest::has_sender() const {
  return _internal_has_sender();
}
inline void ReplicateChunkRequest::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::dht::NodeId& ReplicateChunkRequest::_internal_sender() const {
  const ::dht::NodeId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dht::NodeId&>(
      ::dht::_NodeId_default_instance_);
}
inline const ::dht::NodeId& ReplicateChunkRequest::sender() const {
  // @@protoc_insertion_point(field_get:dht.ReplicateChunkRequest.sender)
  return _internal_sender();
}
inline void ReplicateChunkRequest::unsafe_arena_set_allocated_sender(
    ::dht::NodeId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dht.ReplicateChunkRequest.sender)
}
inline ::dht::NodeId* ReplicateChunkRequest::release_sender() {
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dht::NodeId* ReplicateChunkRequest::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dht.ReplicateChunkRequest.sender)
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dht::NodeId* ReplicateChunkRequest::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dht::NodeId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dht::NodeId* ReplicateChunkRequest::mutable_sender() {
  ::dht::NodeId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dht.ReplicateChunkRequest.sender)
  return _msg;
}
inline void ReplicateChunkRequest::set_allocated_sender(::dht::NodeId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dht.ReplicateChunkRequest.sender)
}

// bytes key = 2;
inline void ReplicateChunkRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ReplicateChunkRequest::key() const {
  // @@protoc_insertion_point(field_get:dht.ReplicateChunkRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicateChunkRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.ReplicateChunkRequest.key)
}
inline std::string* ReplicateChunkRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:dht.ReplicateChunkRequest.key)
  return _s;
}
inline const std::string& ReplicateChunkRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReplicateChunkRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicateChunkRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicateChunkRequest::release_key() {
  // @@protoc_insertion_point(field_release:dht.ReplicateChunkRequest.key)
  return _impl_.key_.Release();
}
inline void ReplicateChunkRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.ReplicateChunkRequest.key)
}

// bytes value = 3;
inline void ReplicateChunkRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ReplicateChunkRequest::value() const {
  // @@protoc_insertion_point(field_get:dht.ReplicateChunkRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicateChunkRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.ReplicateChunkRequest.value)
}
inline std::string* ReplicateChunkRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dht.ReplicateChunkRequest.value)
  return _s;
}
inline const std::string& ReplicateChunkRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ReplicateChunkRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicateChunkRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicateChunkRequest::release_value() {
  // @@protoc_insertion_point(field_release:dht.ReplicateChunkRequest.value)
  return _impl_.value_.Release();
}
inline void ReplicateChunkRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.ReplicateChunkRequest.value)
}

// -------------------------------------------------------------------

// ReplicateChunkResponse

// string status = 1;
inline void ReplicateChunkResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& ReplicateChunkResponse::status() const {
  // @@protoc_insertion_point(field_get:dht.ReplicateChunkResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicateChunkResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.ReplicateChunkResponse.status)
}
inline std::string* ReplicateChunkResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:dht.ReplicateChunkResponse.status)
  return _s;
}
inline const std::string& ReplicateChunkResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void ReplicateChunkResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicateChunkResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicateChunkResponse::release_status() {
  // @@protoc_insertion_point(field_release:dht.ReplicateChunkResponse.status)
  return _impl_.status_.Release();
}
inline void ReplicateChunkResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.ReplicateChunkResponse.status)
}

// -------------------------------------------------------------------

// AddPeerRequest

// .dht.NodeId sender = 1;
inline bool AddPeerRequest::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool AddPeerRequest::has_sender() const {
  return _internal_has_sender();
}
inline void AddPeerRequest::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::dht::NodeId& AddPeerRequest::_internal_sender() const {
  const ::dht::NodeId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dht::NodeId&>(
      ::dht::_NodeId_default_instance_);
}
inline const ::dht::NodeId& AddPeerRequest::sender() const {
  // @@protoc_insertion_point(field_get:dht.AddPeerRequest.sender)
  return _internal_sender();
}
inline void AddPeerRequest::unsafe_arena_set_allocated_sender(
    ::dht::NodeId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dht.AddPeerRequest.sender)
}
inline ::dht::NodeId* AddPeerRequest::release_sender() {
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dht::NodeId* AddPeerRequest::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dht.AddPeerRequest.sender)
  
  ::dht::NodeId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dht::NodeId* AddPeerRequest::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dht::NodeId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dht::NodeId* AddPeerRequest::mutable_sender() {
  ::dht::NodeId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dht.AddPeerRequest.sender)
  return _msg;
}
inline void AddPeerRequest::set_allocated_sender(::dht::NodeId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dht.AddPeerRequest.sender)
}

// -------------------------------------------------------------------

// AddPeerResponse

// string status = 1;
inline void AddPeerResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& AddPeerResponse::status() const {
  // @@protoc_insertion_point(field_get:dht.AddPeerResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dht.AddPeerResponse.status)
}
inline std::string* AddPeerResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:dht.AddPeerResponse.status)
  return _s;
}
inline const std::string& AddPeerResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void AddPeerResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* AddPeerResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* AddPeerResponse::release_status() {
  // @@protoc_insertion_point(field_release:dht.AddPeerResponse.status)
  return _impl_.status_.Release();
}
inline void AddPeerResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dht.AddPeerResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dht

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dht_2eproto
