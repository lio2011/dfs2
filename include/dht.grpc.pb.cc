// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dht.proto

#include "dht.pb.h"
#include "dht.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dht {

static const char* DHTNode_method_names[] = {
  "/dht.DHTNode/Ping",
  "/dht.DHTNode/Store",
  "/dht.DHTNode/FindNode",
  "/dht.DHTNode/ReplicateChunk",
  "/dht.DHTNode/AddPeer",
};

std::unique_ptr< DHTNode::Stub> DHTNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DHTNode::Stub> stub(new DHTNode::Stub(channel, options));
  return stub;
}

DHTNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(DHTNode_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Store_(DHTNode_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindNode_(DHTNode_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplicateChunk_(DHTNode_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPeer_(DHTNode_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DHTNode::Stub::Ping(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::dht::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dht::PingRequest, ::dht::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void DHTNode::Stub::async::Ping(::grpc::ClientContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dht::PingRequest, ::dht::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void DHTNode::Stub::async::Ping(::grpc::ClientContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dht::PingResponse>* DHTNode::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dht::PingResponse, ::dht::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dht::PingResponse>* DHTNode::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DHTNode::Stub::Store(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::dht::StoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dht::StoreRequest, ::dht::StoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Store_, context, request, response);
}

void DHTNode::Stub::async::Store(::grpc::ClientContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dht::StoreRequest, ::dht::StoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, std::move(f));
}

void DHTNode::Stub::async::Store(::grpc::ClientContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>* DHTNode::Stub::PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dht::StoreResponse, ::dht::StoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Store_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>* DHTNode::Stub::AsyncStoreRaw(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DHTNode::Stub::FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::dht::FindNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dht::FindNodeRequest, ::dht::FindNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindNode_, context, request, response);
}

void DHTNode::Stub::async::FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dht::FindNodeRequest, ::dht::FindNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindNode_, context, request, response, std::move(f));
}

void DHTNode::Stub::async::FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>* DHTNode::Stub::PrepareAsyncFindNodeRaw(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dht::FindNodeResponse, ::dht::FindNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>* DHTNode::Stub::AsyncFindNodeRaw(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DHTNode::Stub::ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::dht::ReplicateChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplicateChunk_, context, request, response);
}

void DHTNode::Stub::async::ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateChunk_, context, request, response, std::move(f));
}

void DHTNode::Stub::async::ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>* DHTNode::Stub::PrepareAsyncReplicateChunkRaw(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dht::ReplicateChunkResponse, ::dht::ReplicateChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplicateChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>* DHTNode::Stub::AsyncReplicateChunkRaw(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplicateChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DHTNode::Stub::AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::dht::AddPeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dht::AddPeerRequest, ::dht::AddPeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPeer_, context, request, response);
}

void DHTNode::Stub::async::AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dht::AddPeerRequest, ::dht::AddPeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPeer_, context, request, response, std::move(f));
}

void DHTNode::Stub::async::AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>* DHTNode::Stub::PrepareAsyncAddPeerRaw(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dht::AddPeerResponse, ::dht::AddPeerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPeer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>* DHTNode::Stub::AsyncAddPeerRaw(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPeerRaw(context, request, cq);
  result->StartCall();
  return result;
}

DHTNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DHTNode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DHTNode::Service, ::dht::PingRequest, ::dht::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DHTNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dht::PingRequest* req,
             ::dht::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DHTNode_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DHTNode::Service, ::dht::StoreRequest, ::dht::StoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DHTNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dht::StoreRequest* req,
             ::dht::StoreResponse* resp) {
               return service->Store(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DHTNode_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DHTNode::Service, ::dht::FindNodeRequest, ::dht::FindNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DHTNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dht::FindNodeRequest* req,
             ::dht::FindNodeResponse* resp) {
               return service->FindNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DHTNode_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DHTNode::Service, ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DHTNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dht::ReplicateChunkRequest* req,
             ::dht::ReplicateChunkResponse* resp) {
               return service->ReplicateChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DHTNode_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DHTNode::Service, ::dht::AddPeerRequest, ::dht::AddPeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DHTNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dht::AddPeerRequest* req,
             ::dht::AddPeerResponse* resp) {
               return service->AddPeer(ctx, req, resp);
             }, this)));
}

DHTNode::Service::~Service() {
}

::grpc::Status DHTNode::Service::Ping(::grpc::ServerContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DHTNode::Service::Store(::grpc::ServerContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DHTNode::Service::FindNode(::grpc::ServerContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DHTNode::Service::ReplicateChunk(::grpc::ServerContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DHTNode::Service::AddPeer(::grpc::ServerContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dht

