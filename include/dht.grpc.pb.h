// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dht.proto
#ifndef GRPC_dht_2eproto__INCLUDED
#define GRPC_dht_2eproto__INCLUDED

#include "dht.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dht {

class DHTNode final {
 public:
  static constexpr char const* service_full_name() {
    return "dht.DHTNode";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::dht::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status Store(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::dht::StoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::StoreResponse>> AsyncStore(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::StoreResponse>>(AsyncStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::StoreResponse>> PrepareAsyncStore(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::StoreResponse>>(PrepareAsyncStoreRaw(context, request, cq));
    }
    virtual ::grpc::Status FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::dht::FindNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::FindNodeResponse>> AsyncFindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::FindNodeResponse>>(AsyncFindNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::FindNodeResponse>> PrepareAsyncFindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::FindNodeResponse>>(PrepareAsyncFindNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::dht::ReplicateChunkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::ReplicateChunkResponse>> AsyncReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::ReplicateChunkResponse>>(AsyncReplicateChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::ReplicateChunkResponse>> PrepareAsyncReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::ReplicateChunkResponse>>(PrepareAsyncReplicateChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::dht::AddPeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::AddPeerResponse>> AsyncAddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::AddPeerResponse>>(AsyncAddPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::AddPeerResponse>> PrepareAsyncAddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::AddPeerResponse>>(PrepareAsyncAddPeerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::dht::GetValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::GetValueResponse>> AsyncGetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::GetValueResponse>>(AsyncGetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::GetValueResponse>> PrepareAsyncGetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dht::GetValueResponse>>(PrepareAsyncGetValueRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Store(::grpc::ClientContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Store(::grpc::ClientContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest* request, ::dht::GetValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest* request, ::dht::GetValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::StoreResponse>* AsyncStoreRaw(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::StoreResponse>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::FindNodeResponse>* AsyncFindNodeRaw(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::FindNodeResponse>* PrepareAsyncFindNodeRaw(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::ReplicateChunkResponse>* AsyncReplicateChunkRaw(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::ReplicateChunkResponse>* PrepareAsyncReplicateChunkRaw(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::AddPeerResponse>* AsyncAddPeerRaw(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::AddPeerResponse>* PrepareAsyncAddPeerRaw(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::GetValueResponse>* AsyncGetValueRaw(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dht::GetValueResponse>* PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::dht::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status Store(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::dht::StoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>> AsyncStore(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>>(AsyncStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>> PrepareAsyncStore(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>>(PrepareAsyncStoreRaw(context, request, cq));
    }
    ::grpc::Status FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::dht::FindNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>> AsyncFindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>>(AsyncFindNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>> PrepareAsyncFindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>>(PrepareAsyncFindNodeRaw(context, request, cq));
    }
    ::grpc::Status ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::dht::ReplicateChunkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>> AsyncReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>>(AsyncReplicateChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>> PrepareAsyncReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>>(PrepareAsyncReplicateChunkRaw(context, request, cq));
    }
    ::grpc::Status AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::dht::AddPeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>> AsyncAddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>>(AsyncAddPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>> PrepareAsyncAddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>>(PrepareAsyncAddPeerRaw(context, request, cq));
    }
    ::grpc::Status GetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::dht::GetValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::GetValueResponse>> AsyncGetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::GetValueResponse>>(AsyncGetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::GetValueResponse>> PrepareAsyncGetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dht::GetValueResponse>>(PrepareAsyncGetValueRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Store(::grpc::ClientContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response, std::function<void(::grpc::Status)>) override;
      void Store(::grpc::ClientContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void FindNode(::grpc::ClientContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response, std::function<void(::grpc::Status)>) override;
      void ReplicateChunk(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response, std::function<void(::grpc::Status)>) override;
      void AddPeer(::grpc::ClientContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest* request, ::dht::GetValueResponse* response, std::function<void(::grpc::Status)>) override;
      void GetValue(::grpc::ClientContext* context, const ::dht::GetValueRequest* request, ::dht::GetValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dht::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dht::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>* AsyncStoreRaw(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::StoreResponse>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::dht::StoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>* AsyncFindNodeRaw(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::FindNodeResponse>* PrepareAsyncFindNodeRaw(::grpc::ClientContext* context, const ::dht::FindNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>* AsyncReplicateChunkRaw(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::ReplicateChunkResponse>* PrepareAsyncReplicateChunkRaw(::grpc::ClientContext* context, const ::dht::ReplicateChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>* AsyncAddPeerRaw(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::AddPeerResponse>* PrepareAsyncAddPeerRaw(::grpc::ClientContext* context, const ::dht::AddPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::GetValueResponse>* AsyncGetValueRaw(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dht::GetValueResponse>* PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::dht::GetValueRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_Store_;
    const ::grpc::internal::RpcMethod rpcmethod_FindNode_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplicateChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPeer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response);
    virtual ::grpc::Status Store(::grpc::ServerContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response);
    virtual ::grpc::Status FindNode(::grpc::ServerContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response);
    virtual ::grpc::Status ReplicateChunk(::grpc::ServerContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response);
    virtual ::grpc::Status AddPeer(::grpc::ServerContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response);
    virtual ::grpc::Status GetValue(::grpc::ServerContext* context, const ::dht::GetValueRequest* request, ::dht::GetValueResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::dht::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::dht::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Store() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::dht::StoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::dht::StoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindNode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNode(::grpc::ServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNode(::grpc::ServerContext* context, ::dht::FindNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::dht::FindNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplicateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplicateChunk() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReplicateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateChunk(::grpc::ServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateChunk(::grpc::ServerContext* context, ::dht::ReplicateChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::dht::ReplicateChunkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPeer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeer(::grpc::ServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeer(::grpc::ServerContext* context, ::dht::AddPeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::dht::AddPeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValue() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValue(::grpc::ServerContext* context, ::dht::GetValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::dht::GetValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_Store<WithAsyncMethod_FindNode<WithAsyncMethod_ReplicateChunk<WithAsyncMethod_AddPeer<WithAsyncMethod_GetValue<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dht::PingRequest, ::dht::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dht::PingRequest* request, ::dht::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::dht::PingRequest, ::dht::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dht::PingRequest, ::dht::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Store() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dht::StoreRequest, ::dht::StoreResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dht::StoreRequest* request, ::dht::StoreResponse* response) { return this->Store(context, request, response); }));}
    void SetMessageAllocatorFor_Store(
        ::grpc::MessageAllocator< ::dht::StoreRequest, ::dht::StoreResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dht::StoreRequest, ::dht::StoreResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Store(
      ::grpc::CallbackServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindNode() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dht::FindNodeRequest, ::dht::FindNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dht::FindNodeRequest* request, ::dht::FindNodeResponse* response) { return this->FindNode(context, request, response); }));}
    void SetMessageAllocatorFor_FindNode(
        ::grpc::MessageAllocator< ::dht::FindNodeRequest, ::dht::FindNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dht::FindNodeRequest, ::dht::FindNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNode(::grpc::ServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindNode(
      ::grpc::CallbackServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplicateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplicateChunk() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dht::ReplicateChunkRequest* request, ::dht::ReplicateChunkResponse* response) { return this->ReplicateChunk(context, request, response); }));}
    void SetMessageAllocatorFor_ReplicateChunk(
        ::grpc::MessageAllocator< ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplicateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateChunk(::grpc::ServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddPeer() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dht::AddPeerRequest, ::dht::AddPeerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dht::AddPeerRequest* request, ::dht::AddPeerResponse* response) { return this->AddPeer(context, request, response); }));}
    void SetMessageAllocatorFor_AddPeer(
        ::grpc::MessageAllocator< ::dht::AddPeerRequest, ::dht::AddPeerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dht::AddPeerRequest, ::dht::AddPeerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeer(::grpc::ServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValue() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::dht::GetValueRequest, ::dht::GetValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dht::GetValueRequest* request, ::dht::GetValueResponse* response) { return this->GetValue(context, request, response); }));}
    void SetMessageAllocatorFor_GetValue(
        ::grpc::MessageAllocator< ::dht::GetValueRequest, ::dht::GetValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dht::GetValueRequest, ::dht::GetValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValue(
      ::grpc::CallbackServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_Store<WithCallbackMethod_FindNode<WithCallbackMethod_ReplicateChunk<WithCallbackMethod_AddPeer<WithCallbackMethod_GetValue<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Store() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindNode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNode(::grpc::ServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplicateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplicateChunk() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReplicateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateChunk(::grpc::ServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPeer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeer(::grpc::ServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValue() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Store() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindNode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNode(::grpc::ServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplicateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplicateChunk() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReplicateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateChunk(::grpc::ServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPeer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeer(::grpc::ServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValue() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Store() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Store(context, request, response); }));
    }
    ~WithRawCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Store(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindNode() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindNode(::grpc::ServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplicateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplicateChunk() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplicateChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplicateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateChunk(::grpc::ServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddPeer() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPeer(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeer(::grpc::ServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValue() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dht::PingRequest, ::dht::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dht::PingRequest, ::dht::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::dht::PingRequest* /*request*/, ::dht::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dht::PingRequest,::dht::PingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Store() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dht::StoreRequest, ::dht::StoreResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dht::StoreRequest, ::dht::StoreResponse>* streamer) {
                       return this->StreamedStore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::dht::StoreRequest* /*request*/, ::dht::StoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dht::StoreRequest,::dht::StoreResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindNode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dht::FindNodeRequest, ::dht::FindNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dht::FindNodeRequest, ::dht::FindNodeResponse>* streamer) {
                       return this->StreamedFindNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindNode(::grpc::ServerContext* /*context*/, const ::dht::FindNodeRequest* /*request*/, ::dht::FindNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dht::FindNodeRequest,::dht::FindNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplicateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplicateChunk() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dht::ReplicateChunkRequest, ::dht::ReplicateChunkResponse>* streamer) {
                       return this->StreamedReplicateChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplicateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplicateChunk(::grpc::ServerContext* /*context*/, const ::dht::ReplicateChunkRequest* /*request*/, ::dht::ReplicateChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplicateChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dht::ReplicateChunkRequest,::dht::ReplicateChunkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPeer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dht::AddPeerRequest, ::dht::AddPeerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dht::AddPeerRequest, ::dht::AddPeerResponse>* streamer) {
                       return this->StreamedAddPeer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPeer(::grpc::ServerContext* /*context*/, const ::dht::AddPeerRequest* /*request*/, ::dht::AddPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dht::AddPeerRequest,::dht::AddPeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValue() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dht::GetValueRequest, ::dht::GetValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dht::GetValueRequest, ::dht::GetValueResponse>* streamer) {
                       return this->StreamedGetValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::dht::GetValueRequest* /*request*/, ::dht::GetValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dht::GetValueRequest,::dht::GetValueResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Store<WithStreamedUnaryMethod_FindNode<WithStreamedUnaryMethod_ReplicateChunk<WithStreamedUnaryMethod_AddPeer<WithStreamedUnaryMethod_GetValue<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Store<WithStreamedUnaryMethod_FindNode<WithStreamedUnaryMethod_ReplicateChunk<WithStreamedUnaryMethod_AddPeer<WithStreamedUnaryMethod_GetValue<Service > > > > > > StreamedService;
};

}  // namespace dht


#endif  // GRPC_dht_2eproto__INCLUDED
